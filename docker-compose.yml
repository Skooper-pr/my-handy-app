# HandyDZ Platform - Docker Compose Configuration
# Production-ready multi-service setup

version: '3.8'

# ===================================
# Services Configuration
# ===================================
services:

  # ===================================
  # Main Application Service
  # ===================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-2024-01-01}
        VERSION: ${APP_VERSION:-1.0.0}
        VCS_REF: ${VCS_REF:-main}
    image: handydz-platform:${APP_VERSION:-latest}
    container_name: handydz-app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-3000}:3000"
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql://${DB_USER:-handydz}:${DB_PASSWORD:-handydz123}@postgres:5432/${DB_NAME:-handydz_db}

      # Application Configuration
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3000
      - APP_URL=${APP_URL:-http://localhost:3000}
      - APP_NAME=${APP_NAME:-HandyDZ Platform}

      # Authentication
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your-nextauth-secret}
      - NEXTAUTH_URL=${APP_URL:-http://localhost:3000}

      # Redis Configuration
      - REDIS_URL=redis://redis:6379
      - REDIS_QUEUE_URL=redis://redis:6379

      # External Services
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - CLOUDINARY_URL=${CLOUDINARY_URL}

      # Email Configuration
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - FROM_EMAIL=${FROM_EMAIL:-noreply@handydz.com}

      # Monitoring
      - SENTRY_DSN=${SENTRY_DSN}

      # Feature Flags
      - ENABLE_REAL_TIME_CHAT=true
      - ENABLE_NOTIFICATIONS=true

    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
      - app_backups:/app/backups

    networks:
      - handydz-network

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.handydz.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.services.handydz.loadbalancer.server.port=3000"

  # ===================================
  # PostgreSQL Database Service
  # ===================================
  postgres:
    image: postgres:15-alpine
    container_name: handydz-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-handydz_db}
      - POSTGRES_USER=${DB_USER:-handydz}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-handydz123}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C

    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro

    ports:
      - "${DB_PORT:-5432}:5432"

    networks:
      - handydz-network

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-handydz} -d ${DB_NAME:-handydz_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # ===================================
  # Redis Cache Service
  # ===================================
  redis:
    image: redis:7-alpine
    container_name: handydz-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"

    volumes:
      - redis_data:/data
      - ./config/redis.conf:/etc/redis/redis.conf:ro

    networks:
      - handydz-network

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

    command: redis-server /etc/redis/redis.conf --appendonly yes

    sysctls:
      - net.core.somaxconn=511

  # ===================================
  # Nginx Reverse Proxy (Optional)
  # ===================================
  nginx:
    image: nginx:1.25-alpine
    container_name: handydz-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"

    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/sites:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
      - ssl_certs:/etc/nginx/ssl

    networks:
      - handydz-network

    depends_on:
      - app

    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ===================================
  # Monitoring Services (Optional)
  # ===================================

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: handydz-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"

    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus

    networks:
      - handydz-network

    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: handydz-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"

    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro

    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false

    networks:
      - handydz-network

    depends_on:
      - prometheus

    profiles:
      - monitoring

  # ===================================
  # Background Job Processor
  # ===================================
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: handydz-platform:${APP_VERSION:-latest}
    container_name: handydz-worker
    restart: unless-stopped

    environment:
      - DATABASE_URL=postgresql://${DB_USER:-handydz}:${DB_PASSWORD:-handydz123}@postgres:5432/${DB_NAME:-handydz_db}
      - REDIS_URL=redis://redis:6379
      - NODE_ENV=${NODE_ENV:-production}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}

    volumes:
      - app_logs:/app/logs

    networks:
      - handydz-network

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

    command: ["npx", "tsx", "src/workers/queue-processor.ts"]

    profiles:
      - workers

# ===================================
# Network Configuration
# ===================================
networks:
  handydz-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ===================================
# Volume Configuration
# ===================================
volumes:
  # Application volumes
  app_logs:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/logs
      o: bind

  app_uploads:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/uploads
      o: bind

  app_backups:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/backups
      o: bind

  # Database volumes
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/postgres
      o: bind

  redis_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/redis
      o: bind

  # Web server volumes
  nginx_logs:
    driver: local

  ssl_certs:
    driver: local

  # Monitoring volumes
  prometheus_data:
    driver: local

  grafana_data:
    driver: local

# ===================================
# Usage Examples:
# ===================================
#
# Start all services:
# docker-compose up -d
#
# Start with monitoring:
# docker-compose --profile monitoring up -d
#
# Start with workers:
# docker-compose --profile workers up -d
#
# Start everything:
# docker-compose --profile monitoring --profile workers up -d
#
# Scale application:
# docker-compose up -d --scale app=3
#
# View logs:
# docker-compose logs -f app
#
# Stop all services:
# docker-compose down
#
# Stop and remove volumes:
# docker-compose down -v
#
# Rebuild and restart:
# docker-compose up -d --build
#
# Environment file:
# Create .env file with your configuration:
# DB_PASSWORD=your_secure_password
# JWT_SECRET=your_jwt_secret
# STRIPE_SECRET_KEY=sk_live_...
# etc.
